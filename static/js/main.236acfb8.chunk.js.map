{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","validatedTitle","trim","addItem","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddCircle","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList","filter","tasksJSXElement","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","Backspace","changeTodoListTitle","removeTodoList","Delete","addTask","style","listStyle","padding","Button","changeTodoListFilter","margin","App","todolistsID_1","v1","todolistsID_2","todolists","setTodoLists","setTasks","taskID","newTask","copyTasks","newValue","tl","todoListComponents","tasksForTodoList","getFilterTasks","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.236acfb8.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddCircle} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n    const onClickAddItem = () => {\r\n        const validatedTitle = title.trim()\r\n        if (validatedTitle) {\r\n            props.addItem(validatedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    const errorMessage = error\r\n        ? <div style={{color: 'red'}}>Title is required!</div>\r\n        : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n            />\r\n            {/*<input*/}\r\n            {/*    value={title}*/}\r\n            {/*    onChange={onChangeTitle}*/}\r\n            {/*    onKeyPress={onKeyPressAddItem}*/}\r\n            {/*    className={error ? \"error\" : \"\"}*/}\r\n            {/*/>*/}\r\n            {/*<IconButton onClick={onClickAddItem} color={\"primary\"}>*/}\r\n            {/*    <AddBox/>*/}\r\n            {/*</IconButton>*/}\r\n\r\n\r\n            <IconButton onClick={onClickAddItem} color={'primary'}>\r\n                <AddCircle/>\r\n            </IconButton>\r\n\r\n            {/*{errorMessage}*/}\r\n            {/*{error && <div style={{color: \"red\"}}>Title is required!</div>}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                autoFocus  /*или autoFocus={true}*/\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType, TaskType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Backspace, Delete} from '@material-ui/icons';\r\n\r\ntype PropsTodoListType = {\r\n    filter: FilterValueType\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (filterValue: FilterValueType, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n}\r\n\r\n\r\nfunction TodoList(props: PropsTodoListType) {\r\n    const {filter} = props;\r\n\r\n    const tasksJSXElement = props.tasks.map(t => {\r\n            const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n            const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.todoListID)\r\n            return (\r\n                <div key={t.id}>\r\n                    <span className={t.isDone ? 'is-done' : ''}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={'primary'}\r\n                            checked={t.isDone}\r\n                            onChange={changeTaskStatus}\r\n                        />\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                    </span>\r\n                    {/*<span>{t.title}</span>*/}\r\n                    <IconButton onClick={removeTask} color={'secondary'}>\r\n                        <Backspace/>\r\n                    </IconButton>\r\n                </div>\r\n\r\n            )\r\n        }\r\n    )\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n    const removeTodoList = () => props.removeTodoList(props.todoListID)\r\n    const onClickSetAllFilter = () => props.changeTodoListFilter('all', props.todoListID)\r\n    const onClickSetActiveFilter = () => props.changeTodoListFilter('active', props.todoListID)\r\n    const onClickSetCompletedFilter = () => props.changeTodoListFilter('completed', props.todoListID)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList} color={'secondary'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                {/*<button onClick={() => props.removeTodoList(props.todoListID)}>X</button>*/}\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div style={{listStyle: 'none', padding: '0px'}}>\r\n                {tasksJSXElement}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={'small'}\r\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                    onClick={onClickSetAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: '5px'}}\r\n                    size={'small'}\r\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                    onClick={onClickSetActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    // style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                    onClick={onClickSetCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography,} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport  type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n    // BLL\r\n    const todolistsID_1 = v1()\r\n    const todolistsID_2 = v1()\r\n\r\n    const [todolists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todolistsID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistsID_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistsID_1]: [\r\n            {id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n        ],\r\n        [todolistsID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Meat', isDone: false},\r\n        ],\r\n    })\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false,\r\n        }\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks(copyTasks)\r\n\r\n        // const newTasks = [newTask, ...tasks]\r\n        // setTasks(newTasks)\r\n        // setTasks([{id: v1(), title, isDone: false},...tasks])\r\n    }\r\n    function changeTaskStatus(taskID: string, newValue: boolean, todoListID: string) {\r\n\r\n        // let task = tasks.find(t => t.id === taskId)\r\n        // if (task) {\r\n        //     task.isDone = isDone;\r\n        // }\r\n        // setTasks([...tasks])\r\n\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone: newValue} : t)\r\n        setTasks(copyTasks)\r\n\r\n        // const updatedTasks = tasks.map(t => t.id === taskId ? {...t, isDone: newValue} : t)\r\n        // setTasks(updatedTasks)\r\n    }\r\n    function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n\r\n    function changeTodoListFilter(filter: FilterValueType, todoListID: string) {\r\n        setTodoLists(todolists.map(tl => tl.id === todoListID ? {...tl, filter: filter} : tl))\r\n    }\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        setTodoLists(todolists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todolists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title,\r\n            filter: 'all'\r\n        }\r\n        setTodoLists([...todolists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n// UI\r\n    function getFilterTasks(tl: TodoListType) {\r\n        switch (tl.filter) {\r\n            case 'active':\r\n                return tasks[tl.id].filter(t => !t.isDone)\r\n            case 'completed':\r\n                return tasks[tl.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[tl.id]\r\n        }\r\n    }\r\n\r\n    const todoListComponents = todolists.map(tl => {\r\n        const tasksForTodoList = getFilterTasks(tl)\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5} style={{padding: '20px'}}>\r\n                    <TodoList\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={'outlined'}\r\n                    >Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 10px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}